/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccountVerificationRequest;
import org.openapitools.model.AccountVerificationResponse1;
import org.openapitools.model.ErrorCodeProvider;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-12-30T23:12:31.800-05:00[America/New_York]")
@Validated
@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /accounts/verification : Verify that a beneficiary account could be able to receive incoming funds.
     * The service verifies that an account exists at the beneficiary bank and is capable of receiving incoming funds. This usually implies that the account is open, properly identified by the given number and, depending on the jurisdiction and market practices in use where the account is held, that the creditor name matches the name of the account holder. The service provider does not take liability for the response and does not provide any guarantee on the outcome of an actual transaction being sent to this account. The information provided is meant to be as accurate as possible at the time that the request was processed. The requester must pass the creditor name and the service provider can use this information as part of the verification or not.
     *
     * @param xBic Describe the BIC for SWIFT to route the request to. Providers get the value from the Gateway and consumers are not required to fill it in. (required)
     * @param subjectDN Describe the Distinguished Name (DN) of the consumer. Providers get the value from the Gateway and consumers are not required to fill it in. (required)
     * @param institution Describe the BIC of the consumer. Providers get the value and consumers are not required to fill it in. (required)
     * @param accountVerificationRequest Verify account details request. (required)
     * @return Get Account Details Response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Unexpected Error (status code 200)
     */
    @ApiOperation(value = "Verify that a beneficiary account could be able to receive incoming funds.", nickname = "verifyAccount", notes = "The service verifies that an account exists at the beneficiary bank and is capable of receiving incoming funds. This usually implies that the account is open, properly identified by the given number and, depending on the jurisdiction and market practices in use where the account is held, that the creditor name matches the name of the account holder. The service provider does not take liability for the response and does not provide any guarantee on the outcome of an actual transaction being sent to this account. The information provided is meant to be as accurate as possible at the time that the request was processed. The requester must pass the creditor name and the service provider can use this information as part of the verification or not.", response = AccountVerificationResponse1.class, tags={ "Verify account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Get Account Details Response", response = AccountVerificationResponse1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorCodeProvider.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorCodeProvider.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorCodeProvider.class),
        @ApiResponse(code = 200, message = "Unexpected Error", response = ErrorCodeProvider.class) })
    @PostMapping(
        value = "/accounts/verification",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountVerificationResponse1> verifyAccount(@ApiParam(value = "Describe the BIC for SWIFT to route the request to. Providers get the value from the Gateway and consumers are not required to fill it in." ,required=true) @RequestHeader(value="x-bic", required=true) String xBic,@ApiParam(value = "Describe the Distinguished Name (DN) of the consumer. Providers get the value from the Gateway and consumers are not required to fill it in." ,required=true) @RequestHeader(value="SubjectDN", required=true) String subjectDN,@ApiParam(value = "Describe the BIC of the consumer. Providers get the value and consumers are not required to fill it in." ,required=true) @RequestHeader(value="Institution", required=true) String institution,@ApiParam(value = "Verify account details request." ,required=true )  @Valid @RequestBody AccountVerificationRequest accountVerificationRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"correlation_identifier\" : \"CORRID-003\", \"response\" : { \"account_validation_status\" : \"PASS\", \"creditor_account_match\" : \"NMTC\", \"creditor_name_match\" : \"NOTC\", \"creditor_address_match\" : \"NOTC\", \"creditor_organisation_identification_match\" : \"NOTC\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
